org.quartz.scheduler.instanceName=TestScheduler1
db.driver=com.mysql.cj.jdbc.Driver
org.quartz.scheduler.instanceId=AUTO
org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount=10
org.quartz.threadPool.threadPriority=5
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread=true
org.quartz.jobStore.misfireThreshold=60000
org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
org.quartz.jobStore.tablePrefix=qrtz_
org.quartz.jobStore.maxMisfiresToHandleAtATime=10
org.quartz.jobStore.isClustered=true 
org.quartz.jobStore.clusterCheckinInterval=20000
#org.quartz.dataSource.myDS.driver = com.mysql.jdbc.Driver
#org.quartz.dataSource.myDS.URL = jdbc:mysql://192.168.22.141:3306/dmsd_quartz?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull
#org.quartz.dataSource.myDS.user = root
#org.quartz.dataSource.myDS.password = root
#org.quartz.dataSource.myDS.maxConnections = 30
#org.quartz.jobStore.selectWithLockSQL = SELECT * FROM {0}LOCKS WHERE LOCK_NAME = ? FOR UPDATE

#
#org.quartz.scheduler.instanceName
#使用StdSchedulerFactory的 getScheduler()方法创建的scheduler实例名称，在同一个程序中可以根据该名称来区分scheduler。如果实在集群环境中使用，你必须使用同一个名称――集群环境下”逻辑”相同的scheduler。
#
#org.quartz.scheduler.instanceId
#scheduler实例的标志id，必须是全局唯一的，即使在集群环境中”逻辑”相同的scheduler。 或者可以使用“SYS_PROP”通过系统属性设置id。
#
#org.quartz.scheduler.instanceIdGenerator.class
#只有在”org.quartz.scheduler.instanceId”设置为”AUTO”的时候才使用该属性设置。默认情况下，“org.quartz.simpl.SimpleInstanceIdGenerator”是基于instanceId和时间戳来自动生成的。其他的id生成器的实现包括 SystemPropertyInstanceIdGenerator 从系统属性获取 “org.quartz.scheduler.instanceId”, 和 HostnameInstanceIdGenerator 使用主机名 (InetAddress.getLocalHost().getHostName())。你也可以自定义生成方式哦。
#
#org.quartz.scheduler.threadName
#指定线程名，如果不指定的话，会自动使用org.quartz.scheduler.instanceName属性值加上后缀字符串”_QuartzSchedulerThread”.
#
#org.quartz.scheduler.makeSchedulerThreadDaemon
#指定scheduler的主线程是否为后台线程。
#
#org.quartz.scheduler.threadsInheritContextClassLoaderOfInitializer
#指定Quartz生成的线程是否继承初始化线程的上下文类加载器。这会影响Quartz的主调度线程、JDBCJobStore的”熄火”处理线程、集群回复线程和线程池里的线程。 将该值设置为“true”可以帮助类加载，JNDI查找，并在应用程序服务器上使用Quartz等相关问题。
#
#org.quartz.scheduler.idleWaitTime
#在调度程序空闲的时候，重复查询是否有可用触发器的等待时间。通常并不会设置为true，除非你是用XA事务，并且延迟触发会导致问题的场景。 5000ms以下是不推荐的，因为它会导致过的的数据库查询。1000ms以下是非法的。
#
#org.quartz.scheduler.dbFailureRetryInterval
#连接超时重试连接的间隔。使用 RamJobStore时，该参数并没什么用。
#
#org.quartz.scheduler.classLoadHelper.class
#默认最可靠的方式就是指定”org.quartz.simpl.CascadingClassLoadHelper”，没必要指定其他类。
#
#org.quartz.scheduler.jobFactory.class
#指定JobFactory的类(接口)名称。负责实例化jobClass。默认是”org.quartz.simpl.PropertySettingJobFactory”,只是在job被执行的时候简单调用newInstance()实例化一个job类。PropertySettingJobFactory 会使用反射机制通过SchedulerContext、 Job、Trigger和 JobDataMaps设置job bean的属性。
#
#使用JTA事务时，可以设置事务相关的属性
#
#org.quartz.scheduler.userTransactionURL
#设置Quartz能够加载UserTransaction换利器的JNDI的 URL。默认值是”java:comp/UserTransaction”。Websphere 的用户可能会设置为“jta/usertransaction。只有在Quartz使用JobStoreCMT的时候，才会使用该属性，并且org.quartz.scheduler.wrapJobExecutionInUserTransaction也会设置为true。
#
#org.quartz.scheduler.wrapJobExecutionInUserTransaction
#如果想使用Quartz在执行一个job前使用UserTransaction，则应该设置该属性为true。job执行完、在JobDataMap改变之后事务会提交。默认值是false。 可以在你的job类中使用 @ExecuteInJTATransaction注解, 可以控制job是否使用事务。
#
#org.quartz.scheduler.skipUpdateCheck
#建议设置为“org.terracotta.quartz.skipUpdateCheck=true”不会在程序运行中还去检查quartz是否有版本更新。
#
#org.quartz.scheduler.batchTriggerAcquisitionMaxCount
#允许调度程序一次性触发的触发器数量。.默认值是1。值越大一次性触发的任务就可以越多，但是在集群环境下，不建议设置为很大值。如果值 > 1, 并且使用了 JDBC JobStore的话, org.quartz.jobStore.acquireTriggersWithinLock属性必须设置为true，以避免”弄脏”数据。
#
#org.quartz.scheduler.batchTriggerAcquisitionFireAheadTimeWindow
#允许触发器被获取并在其预定的触发时间之前触发的数量。默认值0。
#
#Quartz线程池的配置
#参数名	是否必须	类型	默认值
#org.quartz.threadPool.class	Y	string (class name)	null
#org.quartz.threadPool.threadCount	Y	string	-1
#org.quartz.threadPool.threadPriority	N	int	Thread.NORM_PRIORITY (5)
#org.quartz.threadPool.class
#线程池的名字。可以使用后Quartz 的 “org.quartz.simpl.SimpleThreadPool”。
#
#org.quartz.threadPool.threadCount
#指定线程数量。一般1-100足以满足你的应用需求了。
#
#org.quartz.threadPool.threadPriority
#线程优先级，Thread.MIN_PRIORITY (1) and Thread.MAX_PRIORITY (10)之间，默认Thread.NORM_PRIORITY (5)。